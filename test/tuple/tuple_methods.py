# slices
float_tuple = (1.1, 0.5, 45.5, 33.33, 9.12, 3.14, 2.73)
print("Первые три элемента кортежа",float_tuple[0:3]) # Вывод 1.1;0,5;45.45.5

# тождественная запись
print("Первые три элемента кортежа",float_tuple[:3]) # вывод 1.1;0.5;45.5
# срез одного элеента
hello=('h','e','l','l','o')
print("Вывод первого элемента кортежа",hello[1])

# если не указывать конечное значение, будут выведены все элементы до конца
print("Вывод кортежа целиком",float_tuple[0:]) # вывод 1.1, 0.5, 45.5, 33.33, 9.12, 3.14, 2.73

# не указывать начальное - с начала
print("Вывод кортежа сначала",float_tuple[:]) # вывод 1.1, 0.5, 45.5, 33.33, 9.12, 3.14, 2.73

# выведем элементы с шагом 2
print("Вывод элементов с шагом 2",float_tuple[-7::2]) # вывод 1.1, 45.5, 9.12, 2.73

# отрицательный шаг позволит вывести tuple в обратном порядке
print("вывод кортежа в обрвтном порядке при помощи отрицательного шага",float_tuple[::-1]) # вывод 2.73, 3.14, 9.12, 33.33, 45.5, 0.5, 1.1
# определение длины len()
lanquage=('p','y','t','h','o','n')
print(len(lanquage))
# конкотенация
storm_1 = ('Lightning')
Union = (' and ')
storm_2 = ('Thunder')
print(storm_1 + Union + storm_2)

